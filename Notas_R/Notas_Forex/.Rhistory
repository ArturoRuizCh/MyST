# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1+1, End = F1+2, Count = NULL)
format(as.Date("10/01/2018 14:00:00"), "%d")
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1+1, End = F1+2, Count = NULL)
Precios_Oanda
F1
F2
F1+2
F1+1
View(Precios_Oanda)
F1+1
F1+2
F1
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1, End = F1+1, Count = NULL)
View(Precios_Oanda)
F1
F1
F1+2
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1, End = F1+2, Count = NULL)
View(Precios_Oanda)
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1, End = F1, Count = NULL)
F1
F1
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1, End = F1+1, Count = NULL)
View(Precios_Oanda)
F2
F1
View(Precios_Oanda)
format(as.Date("10/01/2018 14:00:00"), "%d")
format(as.Date("10/01/2018 14:00:00"), "%m/%d/%Y %H:%M:%S")
format(as.Date("10/01/2018 14:00:00"), "%m/%d/%Y %H:%M:%S")
format("10/01/2018 14:00:00", "%m/%d/%Y %H:%M:%S")
as.Date("10/01/2018 14:00:00")
format(as.Date(x = "10/01/2018 14:00:00"), "%m/%d/%Y %H:%M:%S")
format(as.Date("10/01/2018 14:00:00"), "%m/%d/%Y %H:%M:%S")
as.POSIXct(Fecha_Ejemplo, format = "%H:%M:%S")
Fecha_Ejemplo
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S")
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1, End = F1+1, Count = NULL)
View(Precios_Oanda)
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
F1
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S")
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT-5")
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S")
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT")
as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT")
format(fecha,tz="America/Mexico_City")
fecha <- as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT")
format(fecha,tz="America/Mexico_City")
fecha
format(fecha, tz="GMT-f")
format(fecha, tz="GMT-5")
fecha <- as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT")
fecha
format(fecha, tz="GMT-5")
format(fecha, tz="America/Mexico_City")
fecha <- as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S", tz = "GMT")
fecha_n <- format(fecha, tz="America/Mexico_City")
fecha_n
F1
F1
F1
wday(fecha)
wday(fecha)
fecha
fecha-1
F1
F1-1
wday(F1-1)
F2
wday(fecha)
wday(F1)
wday(F1) =! 1
wday(F1) =! 1
wday(F1) == 1
wday(F1)
# Opcion 1 para convertir a "YYYY-MM-DD"
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
wday(F1)
wday(F1) == 1
wday(F1) =! 1
wday(F1) =! 1
wday(F1) != 1
wday(F1)
# Opcion 1 para convertir a "YYYY-MM-DD"
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
wday(F1) != 1
wday(F1) != 1
F1
F3 <- "2018-09-30"
wday(F3) != 1
F3-2
F3 <- "2018-09-30"
F3-2
F3
F3 <- as.Date("2018-09-30")
F3
F3-2
View(Precios_Oanda)
F1
Fecha_Ejemplo
F1
fecha
fecha_n
fecha <- as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S")
fecha
fecha <- as.character(as.POSIXct(Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S"))
fecha
which(Precios_Oanda$TimeStamp == fecha)
ind <- which(Precios_Oanda$TimeStamp == fecha)
Precios_Oanda[ind-15:ind+15,]
View(Precios_Oanda[ind-15:ind+15,])
View(Precios_Oanda[(ind-15):(ind+15),])
ind
df <- Precios_Oanda[(ind-15):(ind+15),]
ind
(ind-15)
(ind+15)
# Para visualizar un data frame con los 31 precios deseados. 15 antes del comunicad, 1
# durante el comunicado y 15 despuÃ©s del comunicado
df <- Precios_Oanda[(ind-15):(ind+15),]
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
# Esta se obtiene de cada observacion en el archivo xls que descargas. Este fue
# un ejemplo de una fecha que podrias leer de tal archivo una vez que lo descargas
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1 para convertir a "YYYY-MM-DD"
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2 para convertir a "YYYY-MM-DD"
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
# Ejemplo Si el comunicado fue en domingo, que pida precios desde viernes a domingo
F3 <- as.Date("2018-09-30")
# Condicion por si acaso toca en domingo el comunicado, no se podria restar un dia y
# que terminara siendo sabado, porque ese dia no hay precios.
if(wday(F3) != 1){
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1-1, End = F1, Count = NULL)
} else {
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F3-2, End = F1, Count = NULL)
}
View(Precios_Oanda)
# -- Borrar todos los elementos del environment
rm(list=ls())
mdir <- getwd()
# -- Establecer el sistema de medicion de la computadora
Sys.setlocale(category = "LC_ALL", locale = "")
# -- Huso horario
Sys.setenv(tz="America/Monterrey", TZ="America/Monterrey")
options(tz="America/Monterrey", TZ="America/Monterrey")
# -- Cargar y/o instalar en automatico paquetes a utilizar -- #
pkg <- c("base","downloader","dplyr","fBasics","forecast","grid",
"gridExtra","httr","jsonlite","lmtest","lubridate","moments",
"matrixStats", "PerformanceAnalytics","plyr","quantmod",
"reshape2","RCurl", "stats","scales","tseries",
"TTR","TSA","XML","xts","zoo")
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0) install.packages(pkg[!inst])
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- Cargar archivos desde GitHub -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
# -- Parametros para usar API-OANDA
# Tipo de cuenta practice/live
OA_At <- "practice"
# ID de cuenta
OA_Ai <- 1742531
# Token para llamadas a API
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
# Hora a la que se considera "Fin del dia"
OA_Da <- 17
# Uso horario
OA_Ta <- "America/Mexico_City"
# Instrumento
OA_In <- "EUR_USD"
# Granularidad o periodicidad de los precios H4 = Cada 4 horas
# S5, S10, S30, M1, M5, M15, M30, H1, H4, H8, D, M
OA_Pr <- "M1"
# Multiplicador de precios para convertir a PIPS
MultPip_MT1 <- 10000
# Esta se obtiene de cada observacion en el archivo xls que descargas. Este fue
# un ejemplo de una fecha que podrias leer de tal archivo una vez que lo descargas
Fecha_Ejemplo <- "10/01/2018 14:00:00"
# Opcion 1 para convertir a "YYYY-MM-DD"
F1 <- as.Date(strptime(x = Fecha_Ejemplo, format = "%m/%d/%Y %H:%M:%S",tz = "GMT"))
# Opcion 2 para convertir a "YYYY-MM-DD"
F2 <- as.Date(substr(Fecha_Ejemplo,1 ,10),format = "%m/%d/%Y")
# Ejemplo Si el comunicado fue en domingo, que pida precios desde viernes a domingo
F3 <- as.Date("2018-09-30")
# Condicion por si acaso toca en domingo el comunicado, no se podria restar un dia y
# que terminara siendo sabado, porque ese dia no hay precios.
if(wday(F3) != 1){
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1-1, End = F1, Count = NULL)
} else {
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F3-2, End = F1, Count = NULL)
}
Precios_Oanda$TimeStamp
View(Precios_Oanda)
Calendario <- read.csv(file = "Calendario_Fx.csv")
setwd("~/Documents/MyST/Notas/Notas_Forex")
Calendario <- read.csv(file = "Calendario_Fx.csv")
Calendario <- read.csv(file = "Calendario_Fx.csv")
Calendario <- read.csv("Calendario_FX.csv")
View(Calendario)
Calendario$DateTime[1]
Calendario$DateTime <- as.character(Calendario$DateTime)
View(Calendario)
Precios_Oanda$TimeStamp[1]
Calendario$DateTime[1]
as.character(as.POSIXct(Calendario$DateTime[1], format = "%m/%d/%Y %H:%M:%S"))
as.character(as.POSIXct(Precios_Oanda$TimeStamp[1], format = "%m/%d/%Y %H:%M:%S"))
fecha_c <- as.character(as.POSIXct(Calendario$DateTime[1], format = "%m/%d/%Y %H:%M:%S"))
fecha_o <- as.character(as.POSIXct(Precios_Oanda$TimeStamp[1], format = "%m/%d/%Y %H:%M:%S"))
fecha_c
fecha_o
View(Precios_Oanda)
# Uso horario
OA_Ta <- "GMT"
# Condicion por si acaso toca en domingo el comunicado, no se podria restar un dia y
# que terminara siendo sabado, porque ese dia no hay precios.
if(wday(F3) != 1){
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1-1, End = F1, Count = NULL)
} else {
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F3-2, End = F1, Count = NULL)
}
View(Precios_Oanda)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.character(as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S"))
Precios_Oanda$TimeStamp <- as.character(as.POSIXct(Precios_Oanda$TimeStamp, format = "%m/%d/%Y %H:%M:%S"))
View(Precios_Oanda)
View(Calendario)
View(Precios_Oanda)
Calendario$DateTime <- as.character(Calendario$DateTime)
View(Calendario)
View(instpackages)
View(Precios_Oanda)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.character(as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S"))
Precios_Oanda$TimeStamp <- as.character(as.POSIXct(Precios_Oanda$TimeStamp, format = "%m/%d/%Y %H:%M:%S"))
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = F1-1, End = F1, Count = NULL)
View(Precios_Oanda)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.character(as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S"))
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
View(instpackages)
View(Calendario)
as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.character(as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S"))
as.character(as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S"))
Calendario <- read.csv("Calendario_FX.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
View(Calendario)
class(Calendario$DateTime)
Calendario$DateTime[1]
Calendario$DateTime[1] - Calendario$DateTime[1]
Calendario$DateTime[2] - Calendario$DateTime[1]
Calendario$DateTime[3] - Calendario$DateTime[1]
fecha <- "2018-01-02 14:45:00"
substr(fecha,1,10)
Calendario$DateTime[1]
class(Calendario$DateTime[1])
as.character(Calendario$DateTime[1])
substr(as.character(Calendario$DateTime[1]),1,10)
View(Precios_Oanda)
Calendario <- read.csv("Calendario_FX.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
Calendario <- read.csv("Calendario_FX.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y")
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
Calendario <- read.csv("Calendario_FX.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
# Para convertir las fechas del csv con historico de indicadores al mismo formato
# de fecha que entrega Oanda los precios
Calendario$DateTime <- as.POSIXct(Calendario$DateTime, format = "%m/%d/%Y %H:%M:%S")
Calendario <- read.csv("Calendario_FX.csv")
Calendario$DateTime <- as.character(Calendario$DateTime)
ejemplo <- "10/16/2018 14:00:00"
e0 <- "10/16/2018 14:00:00"
e0 <- "10/16/2018 14:00:00"
e1 <- as.POSIXct(e0)
e1 <- as.POSIXct(e0, format = "%m/%d/%Y %H:%M:%S")
e1
e1
e1 <- as.character(as.POSIXct(e0, format = "%m/%d/%Y %H:%M:%S"))
e1
e2 <- as.character(e1)
e0 <- "10/16/2018 14:00:00"
e1 <- as.POSIXct(e0, format = "%m/%d/%Y %H:%M:%S")
e2 <- as.character(e1)
e2
F1
substr(e2,1,10)
e3 <- substr(e2,1,10)
e3
e0 <- "01/02/2018 14:45:00"
e1 <- as.POSIXct(e0, format = "%m/%d/%Y %H:%M:%S")
e2 <- as.character(e1)
e3 <- substr(e2,1,10)
class(e3)
e3
e3+1
as.Date(e3)
as.Date(e3)+1
e4 <- as.Date(e3)
e5 <- e4+1
e4
e5
Precios_Oanda <- HisPrices(AccountType = OA_At, Granularity = OA_Pr,
DayAlign = OA_Da, TimeAlign = OA_Ta, Token = OA_Ak,
Instrument = OA_In,
Start = e4, End = e5, Count = NULL)
View(Precios_Oanda)
OA_Pr
View(Precios_Oanda)
e2
which(Precios_Oanda$TimeStamp == e2)
